Чтобы выполнить задание:
Первое нужно посмотреть где ты находишься, используй команду pwd:
pwd
К примеру она тебе покажет путь /home/sergey/Desktop/PursuitOfCodeKnowledge.git/PursuitOfCodeKnowledge/Game/LevelZero/Universe1/MilkyWayGalaxy/PlanetEarth/Purple4, получается ты сейчас находишься в Purple4, 
тебе нужно вернуться назад используй команду cd ..:
cd ..
После этого набери команду ls или ls -a и посмотри что находится вокруг тебя какие файлы и директории:
ls
или
ls -a
Затем набери команду mkdir чтобы создать директорию Purple (в том случае если ещё не создавал директорию Purple):
mkdir Purple
Затем перейди директорию в Purple4:
cd Purple4
Потом скопируй файл PURPLE4.txt в директорию Purple:
cp PURPLE4.txt ../Purple/
Затем проверь что скопировал файл PURPLE4.txt в директорию Purple при помощи команды ls:
ls ../Purple/PURPLE4.txt
После перенеси  файл файл PURPLE4_ANSWER.txt в директорию Purple:
mv PURPLE4_ANSWER.txt ../Purple/
Потом удали файл PURPLE4.txt при помощи команды rm:
rm PURPLE4.txt
или
rm -i PURPLE4.txt
или
rm -f PURPLE4.txt
После выйди из этой директории Purple4:
cd ..
Затем удали директорию Purple4:
rm -r Purple4
После убедись что удалил директорию:
ls 
или
ls -a

Если исследовал уже директорию Purple3, то заходим в свою директорию LearnPython:
cd LearnPython
Потом создай директорию Agents(в том случае если ещё не создавал Agents):
mkdir Agents
Затем перейди в эту директорию Agents:
cd Agents
Итак создай файл routing.py:
touch routing.py
Потом открой файл routing.py:
nano routing.py
Пишем в файле для OpenAI(если ещё не создавал ключ API, смотри Orange6):
import asyncio
import uuid
from typing import Callable, List, Optional
from openai import AsyncOpenAI


# --- Базовый класс агента ---
class Agent:
    def __init__(self, name: str, model: str, description: str, tools: Optional[List[Callable]] = None):
        self.name = name
        self.model = model
        self.description = description
        self.tools = tools or []
        self.client = AsyncOpenAI()

    async def run(self, request: str) -> str:
        """
        Запускает агента. Если у агента есть tool — вызывает tool.
        Если нет — обращается к LLM.
        """
        if self.tools:
            # Берем первую функцию (для примера)
            tool = self.tools[0]
            return tool(request)

        resp = await self.client.chat.completions.create(
            model=self.model,
            messages=[
                {"role": "system", "content": self.description},
                {"role": "user", "content": request},
            ],
        )
        return resp.choices[0].message.content


# --- Tool-функции ---
def booking_handler(request: str) -> str:
    print("-------------------------- Booking Handler Called ----------------------------")
    return f"Booking action for '{request}' has been simulated."


def info_handler(request: str) -> str:
    print("-------------------------- Info Handler Called ----------------------------")
    return f"Information request for '{request}'. Result: Simulated information retrieval."


def unclear_handler(request: str) -> str:
    return f"Coordinator could not delegate request: '{request}'. Please clarify."


# --- Специализированные агенты ---
booking_agent = Agent(
    name="Booker",
    model="gpt-4o-mini",
    description="Specialist agent that handles booking flights and hotels.",
    tools=[booking_handler],
)

info_agent = Agent(
    name="Info",
    model="gpt-4o-mini",
    description="Specialist agent that provides general information.",
    tools=[info_handler],
)


# --- Координатор ---
class Coordinator(Agent):
    def __init__(self, name: str, model: str, description: str, sub_agents: List[Agent]):
        super().__init__(name, model, description)
        self.sub_agents = sub_agents

    async def run(self, request: str) -> str:
        """ Делегирует задачу правильному агенту. """
        request_lower = request.lower()
        if "hotel" in request_lower or "flight" in request_lower or "book" in request_lower:
            return await booking_agent.run(request)
        elif any(word in request_lower for word in ["who", "what", "where", "when", "why", "how", "tell", "info"]):
            return await info_agent.run(request)
        else:
            return unclear_handler(request)



coordinator = Coordinator(
    name="Coordinator",
    model="gpt-4o-mini",
    description=(
        "Main coordinator. Delegates booking tasks to 'Booker' and general "
        "info questions to 'Info'. Never answer directly."
    ),
    sub_agents=[booking_agent, info_agent],
)


# --- Запуск ---
async def run_coordinator(request: str):
    print(f"\n--- Running Coordinator with request: '{request}' ---")
    session_id = str(uuid.uuid4())
    try:
        result = await coordinator.run(request)
        print(f"Coordinator Final Response: {result}")
        return result
    except Exception as e:
        print(f"Error: {e}")
        return f"Error: {e}"


async def main():
    print("--- OpenAI Multi-Agent Routing Example ---")

    result_a = await run_coordinator("Book me a hotel in Paris.")
    print(f"Final Output A: {result_a}")

    result_b = await run_coordinator("What is the highest mountain in the world?")
    print(f"Final Output B: {result_b}")

    result_c = await run_coordinator("Can you dance for me?")
    print(f"Final Output C: {result_c}")

    result_d = await run_coordinator("Find flights to Tokyo next month.")
    print(f"Final Output D: {result_d}")


if __name__ == "__main__":
    asyncio.run(main())

Нажимаем ctrl + o, затем enter и выходим из файла ctrl + x, после запускаем скрипт:
python3 routing.py  

Или пишем в файле для YandexGPT(если ещё не создавал ключ API, смотри Orange6):
import asyncio
import uuid
from typing import Callable, List, Optional
import aiohttp
import os

# ----------------------------------------------------------------------
# Конфиг: API-ключ Яндекс и ID каталога (ставим через export в Debian)
# ----------------------------------------------------------------------
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")  # export YANDEX_API_KEY="..."
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")  # export YANDEX_FOLDER_ID="..."

YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# --- Базовый класс агента ---
class Agent:
    def __init__(self, name: str, model: str, description: str, tools: Optional[List[Callable]] = None):
        self.name = name
        self.model = model
        self.description = description
        self.tools = tools or []

    async def run(self, request: str) -> str:
        """
        Запускает агента. Если у агента есть tool — вызывает tool.
        Если нет — обращается к LLM (YandexGPT).
        """
        if self.tools:
            tool = self.tools[0]
            return tool(request)

        headers = {
            "Authorization": f"Api-Key {YANDEX_API_KEY}",
            "x-folder-id": YANDEX_FOLDER_ID,
            "Content-Type": "application/json",
        }
        payload = {
            "modelUri": f"gpt://{YANDEX_FOLDER_ID}/{self.model}/latest",
            "completionOptions": {
                "stream": False,
                "temperature": 0.6,
                "maxTokens": 500,
            },
            "messages": [
                {"role": "system", "text": self.description},
                {"role": "user", "text": request},
            ],
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(YANDEX_GPT_URL, headers=headers, json=payload) as resp:
                data = await resp.json()
                try:
                    return data["result"]["alternatives"][0]["message"]["text"]
                except Exception as e:
                    return f"YandexGPT error: {data}, exc={e}"

# --- Tool-функции ---
def booking_handler(request: str) -> str:
    print("-------------------------- Booking Handler Called ----------------------------")
    return f"Booking action for '{request}' has been simulated."

def info_handler(request: str) -> str:
    print("-------------------------- Info Handler Called ----------------------------")
    return f"Information request for '{request}'. Result: Simulated information retrieval."

def unclear_handler(request: str) -> str:
    return f"Coordinator could not delegate request: '{request}'. Please clarify."

# --- Специализированные агенты ---
booking_agent = Agent(
    name="Booker",
    model="yandexgpt-lite",  # укажем YandexGPT-lite, можно поменять на yandexgpt
    description="Specialist agent that handles booking flights and hotels.",
    tools=[booking_handler],
)

info_agent = Agent(
    name="Info",
    model="yandexgpt-lite",
    description="Specialist agent that provides general information.",
    tools=[info_handler],
)

# --- Координатор ---
class Coordinator(Agent):
    def __init__(self, name: str, model: str, description: str, sub_agents: List[Agent]):
        super().__init__(name, model, description)
        self.sub_agents = sub_agents

    async def run(self, request: str) -> str:
        """ Делегирует задачу правильному агенту. """
        request_lower = request.lower()
        if "hotel" in request_lower or "flight" in request_lower or "book" in request_lower:
            return await booking_agent.run(request)
        elif any(word in request_lower for word in ["who", "what", "where", "when", "why", "how", "tell", "info"]):
            return await info_agent.run(request)
        else:
            return unclear_handler(request)

coordinator = Coordinator(
    name="Coordinator",
    model="yandexgpt-lite",
    description=(
        "Main coordinator. Delegates booking tasks to 'Booker' and general "
        "info questions to 'Info'. Never answer directly."
    ),
    sub_agents=[booking_agent, info_agent],
)

# --- Запуск ---
async def run_coordinator(request: str):
    print(f"\n--- Running Coordinator with request: '{request}' ---")
    session_id = str(uuid.uuid4())
    try:
        result = await coordinator.run(request)
        print(f"Coordinator Final Response: {result}")
        return result
    except Exception as e:
        print(f"Error: {e}")
        return f"Error: {e}"

async def main():
    print("--- YandexGPT Multi-Agent Routing Example ---")

    result_a = await run_coordinator("Book me a hotel in Paris.")
    print(f"Final Output A: {result_a}")

    result_b = await run_coordinator("What is the highest mountain in the world?")
    print(f"Final Output B: {result_b}")

    result_c = await run_coordinator("Can you dance for me?")
    print(f"Final Output C: {result_c}")

    result_d = await run_coordinator("Find flights to Tokyo next month.")
    print(f"Final Output D: {result_d}")

if __name__ == "__main__":
    asyncio.run(main())

Нажимаем ctrl + o, затем enter и выходим из файла ctrl + x, после запускаем скрипт:
python3 routing.py

После выходим из директории Agents:
cd ..
Дальше выйди из папки LearnPython:
cd ..

Потом дальше иследуй другую директорию, например Purple5:
cd Purple5

To complete the task:
First you need to see where you are, use the pwd command:
pwd
For example, she'll show you the way  /home/sergey/Desktop/PursuitOfCodeKnowledge.git/PursuitOfCodeKnowledge/Game/LevelZero/Universe1/MilkyWayGalaxy/PlanetEarth/Purple4
 it turns out that you are currently in Purple4,
you need to go back using the cd .. :
cd ..
After that, type the command ls or ls -a and see what is around you, which files and directories:
ls
or
ls -a
Then type the mkdir command to create
the Purple directory(if you didn't create Purple directory):
mkdir Purple
Then go to the directory in Purple4:
cd Purple4
Then  copy the file PURPLE4.txt to the Purple:
cp PURPLE4.txt ../Purple/
Then check that you copied the file. PURPLE4.txt to the Purple directory using the command ls:
ls ../Purple/PURPLE4.txt
Then transfer the file PURPLE4_ANSWER.txt to the Purple:
mv PURPLE4_ANSWER.txt ../Purple/
Then delete the file PURPLE4.txt using the rm command:
rm PURPLE4.txt
or
rm -i PURPLE4.txt
or
rm -f PURPLE4.txt
Then exit this directory Purple4:
cd ..
Then delete the Purple4 directory:
rm -r Purple4
After that, make sure that you have deleted the directory:
ls
or
ls -a

If you have already explored the Purple3 directory, then то заходим в свою директорию LearnPython:
cd LearnPython
Потом создай директорию Agents(в том случае если ещё не создавал Agents):
mkdir Agents
Затем перейди в эту директорию Agents:
cd Agents
Итак создай файл routing.py:
touch routing.py
Потом открой файл routing.py:
nano routing.py
Пишем в файле для OpenAI(если ещё не создавал ключ API, смотри Orange6):
import asyncio
import uuid
from typing import Callable, List, Optional
from openai import AsyncOpenAI


# --- Базовый класс агента ---
class Agent:
    def __init__(self, name: str, model: str, description: str, tools: Optional[List[Callable]] = None):
        self.name = name
        self.model = model
        self.description = description
        self.tools = tools or []
        self.client = AsyncOpenAI()

    async def run(self, request: str) -> str:
        """
        Запускает агента. Если у агента есть tool — вызывает tool.
        Если нет — обращается к LLM.
        """
        if self.tools:
            # Берем первую функцию (для примера)
            tool = self.tools[0]
            return tool(request)

        resp = await self.client.chat.completions.create(
            model=self.model,
            messages=[
                {"role": "system", "content": self.description},
                {"role": "user", "content": request},
            ],
        )
        return resp.choices[0].message.content


# --- Tool-функции ---
def booking_handler(request: str) -> str:
    print("-------------------------- Booking Handler Called ----------------------------")
    return f"Booking action for '{request}' has been simulated."


def info_handler(request: str) -> str:
    print("-------------------------- Info Handler Called ----------------------------")
    return f"Information request for '{request}'. Result: Simulated information retrieval."


def unclear_handler(request: str) -> str:
    return f"Coordinator could not delegate request: '{request}'. Please clarify."


# --- Специализированные агенты ---
booking_agent = Agent(
    name="Booker",
    model="gpt-4o-mini",
    description="Specialist agent that handles booking flights and hotels.",
    tools=[booking_handler],
)

info_agent = Agent(
    name="Info",
    model="gpt-4o-mini",
    description="Specialist agent that provides general information.",
    tools=[info_handler],
)


# --- Координатор ---
class Coordinator(Agent):
    def __init__(self, name: str, model: str, description: str, sub_agents: List[Agent]):
        super().__init__(name, model, description)
        self.sub_agents = sub_agents

    async def run(self, request: str) -> str:
        """ Делегирует задачу правильному агенту. """
        request_lower = request.lower()
        if "hotel" in request_lower or "flight" in request_lower or "book" in request_lower:
            return await booking_agent.run(request)
        elif any(word in request_lower for word in ["who", "what", "where", "when", "why", "how", "tell", "info"]):
            return await info_agent.run(request)
        else:
            return unclear_handler(request)



coordinator = Coordinator(
    name="Coordinator",
    model="gpt-4o-mini",
    description=(
        "Main coordinator. Delegates booking tasks to 'Booker' and general "
        "info questions to 'Info'. Never answer directly."
    ),
    sub_agents=[booking_agent, info_agent],
)


# --- Запуск ---
async def run_coordinator(request: str):
    print(f"\n--- Running Coordinator with request: '{request}' ---")
    session_id = str(uuid.uuid4())
    try:
        result = await coordinator.run(request)
        print(f"Coordinator Final Response: {result}")
        return result
    except Exception as e:
        print(f"Error: {e}")
        return f"Error: {e}"


async def main():
    print("--- OpenAI Multi-Agent Routing Example ---")

    result_a = await run_coordinator("Book me a hotel in Paris.")
    print(f"Final Output A: {result_a}")

    result_b = await run_coordinator("What is the highest mountain in the world?")
    print(f"Final Output B: {result_b}")

    result_c = await run_coordinator("Can you dance for me?")
    print(f"Final Output C: {result_c}")

    result_d = await run_coordinator("Find flights to Tokyo next month.")
    print(f"Final Output D: {result_d}")


if __name__ == "__main__":
    asyncio.run(main())

Нажимаем ctrl + o, затем enter и выходим из файла ctrl + x, после запускаем скрипт:
python3 routing.py  

Или пишем в файле для YandexGPT(если ещё не создавал ключ API, смотри Orange6):
import asyncio
import uuid
from typing import Callable, List, Optional
import aiohttp
import os

# ----------------------------------------------------------------------
# Конфиг: API-ключ Яндекс и ID каталога (ставим через export в Debian)
# ----------------------------------------------------------------------
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")  # export YANDEX_API_KEY="..."
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")  # export YANDEX_FOLDER_ID="..."

YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# --- Базовый класс агента ---
class Agent:
    def __init__(self, name: str, model: str, description: str, tools: Optional[List[Callable]] = None):
        self.name = name
        self.model = model
        self.description = description
        self.tools = tools or []

    async def run(self, request: str) -> str:
        """
        Запускает агента. Если у агента есть tool — вызывает tool.
        Если нет — обращается к LLM (YandexGPT).
        """
        if self.tools:
            tool = self.tools[0]
            return tool(request)

        headers = {
            "Authorization": f"Api-Key {YANDEX_API_KEY}",
            "x-folder-id": YANDEX_FOLDER_ID,
            "Content-Type": "application/json",
        }
        payload = {
            "modelUri": f"gpt://{YANDEX_FOLDER_ID}/{self.model}/latest",
            "completionOptions": {
                "stream": False,
                "temperature": 0.6,
                "maxTokens": 500,
            },
            "messages": [
                {"role": "system", "text": self.description},
                {"role": "user", "text": request},
            ],
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(YANDEX_GPT_URL, headers=headers, json=payload) as resp:
                data = await resp.json()
                try:
                    return data["result"]["alternatives"][0]["message"]["text"]
                except Exception as e:
                    return f"YandexGPT error: {data}, exc={e}"

# --- Tool-функции ---
def booking_handler(request: str) -> str:
    print("-------------------------- Booking Handler Called ----------------------------")
    return f"Booking action for '{request}' has been simulated."

def info_handler(request: str) -> str:
    print("-------------------------- Info Handler Called ----------------------------")
    return f"Information request for '{request}'. Result: Simulated information retrieval."

def unclear_handler(request: str) -> str:
    return f"Coordinator could not delegate request: '{request}'. Please clarify."

# --- Специализированные агенты ---
booking_agent = Agent(
    name="Booker",
    model="yandexgpt-lite",  # укажем YandexGPT-lite, можно поменять на yandexgpt
    description="Specialist agent that handles booking flights and hotels.",
    tools=[booking_handler],
)

info_agent = Agent(
    name="Info",
    model="yandexgpt-lite",
    description="Specialist agent that provides general information.",
    tools=[info_handler],
)

# --- Координатор ---
class Coordinator(Agent):
    def __init__(self, name: str, model: str, description: str, sub_agents: List[Agent]):
        super().__init__(name, model, description)
        self.sub_agents = sub_agents

    async def run(self, request: str) -> str:
        """ Делегирует задачу правильному агенту. """
        request_lower = request.lower()
        if "hotel" in request_lower or "flight" in request_lower or "book" in request_lower:
            return await booking_agent.run(request)
        elif any(word in request_lower for word in ["who", "what", "where", "when", "why", "how", "tell", "info"]):
            return await info_agent.run(request)
        else:
            return unclear_handler(request)

coordinator = Coordinator(
    name="Coordinator",
    model="yandexgpt-lite",
    description=(
        "Main coordinator. Delegates booking tasks to 'Booker' and general "
        "info questions to 'Info'. Never answer directly."
    ),
    sub_agents=[booking_agent, info_agent],
)

# --- Запуск ---
async def run_coordinator(request: str):
    print(f"\n--- Running Coordinator with request: '{request}' ---")
    session_id = str(uuid.uuid4())
    try:
        result = await coordinator.run(request)
        print(f"Coordinator Final Response: {result}")
        return result
    except Exception as e:
        print(f"Error: {e}")
        return f"Error: {e}"

async def main():
    print("--- YandexGPT Multi-Agent Routing Example ---")

    result_a = await run_coordinator("Book me a hotel in Paris.")
    print(f"Final Output A: {result_a}")

    result_b = await run_coordinator("What is the highest mountain in the world?")
    print(f"Final Output B: {result_b}")

    result_c = await run_coordinator("Can you dance for me?")
    print(f"Final Output C: {result_c}")

    result_d = await run_coordinator("Find flights to Tokyo next month.")
    print(f"Final Output D: {result_d}")

if __name__ == "__main__":
    asyncio.run(main())

Нажимаем ctrl + o, затем enter и выходим из файла ctrl + x, после запускаем скрипт:
python3 routing.py


After that, we exit the Agents:
cd ..
Next, exit the LearnPython:
cd .. 
Then follow another directory, for example Purple5:
cd Purple5
