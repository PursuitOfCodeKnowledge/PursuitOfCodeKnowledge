Чтобы выполнить задание:
Первое нужно посмотреть где ты находишься, используй команду pwd:
pwd
К примеру она тебе покажет путь /home/sergey/Desktop/PursuitOfCodeKnowledge.git/PursuitOfCodeKnowledge/Game/LevelZero/Universe1/MilkyWayGalaxy/PlanetEarth/Orange3, получается ты сейчас находишься в Orange3, 
тебе нужно вернуться назад используй команду cd ..:
cd ..
После этого набери команду ls или ls -a и посмотри что находится вокруг тебя какие файлы и директории:
ls
или
ls -a
Затем набери команду mkdir чтобы создать директорию Orange (в том случае если ещё не создавал директорию Orange):
mkdir Orange
Затем перейди директорию в Orange3:
cd Orange3
Потом перенеси файл ORANGE3.txt в директорию Orange:
mv ORANGE3.txt ../Orange/
После скопируй файл файл ORANGE3_ANSWER.txt в директорию Orange:
cp ORANGE3_ANSWER.txt ../Orange/
Затем проверь что скопировал файл ORANGE3_ANSWER.txt в директорию Orange при помощи команды ls:
ls ../Orange/ORANGE3_ANSWER.txt
Потом удали файл ORANGE3_ANSWER.txt при помощи команды rm:
rm ORANGE3_ANSWER.txt
или
rm -i ORANGE3_ANSWER.txt
или
rm -f ORANGE3_ANSWER.txt
После выйди из этой директории Orange3:
cd ..
Затем удали директорию Orange3:
rm -r Orange3
После убедись что удалил директорию:
ls 
или
ls -a
Если исследовал уже директорию Orange2, то заходим в своё окружение(смотри директорию Blue1):
conda activate envlearnpython
Затем заходим в свою директорию LearnPython:
cd LearnPython
Потом создай директорию OOP:
mkdir OOP
Затем перейди в эту директорию OOP:
cd OOP
Итак создай файл classes_objects_methods.py:
touch classes_objects_methods.py
Потом открой файл classes_objects_methods.py:
nano classes_objects_methods.py
Пишем в файле:

from abc import ABC
from typing import Optional, List

# Интерфейсы для отдельных методов
class Flyable:
    def fly(self) -> None: ...

class Swimable:
    def swim(self) -> None: ...

class Shootable:
    def shoot(self) -> None: ...


# Реализации для Fly
class CanFly(Flyable):
    def fly(self) -> None:
        print("I can to fly")

class CannotFly(Flyable):
    def fly(self) -> None:
        pass


# Реализации для Swim
class CanSwim(Swimable):
    def swim(self) -> None:
        print("I can to swim")

class CannotSwim(Swimable):
    def swim(self) -> None:
        pass


# Реализации для Shoot
class CanShoot(Shootable):
    def shoot(self) -> None:
        print("I can to shoot")

class CannotShoot(Shootable):
    def shoot(self) -> None:
        pass


class Robot(ABC):
    def __init__(self,
                 fly_behavior: Flyable = CannotFly(),
                 swim_behavior: Swimable = CannotSwim(),
                 shoot_behavior: Shootable = CannotShoot(),
                 name: str = "Robot"):
        self._fly_behavior = fly_behavior
        self._swim_behavior = swim_behavior
        self._shoot_behavior = shoot_behavior
        self.name = name

    def speak(self) -> None:
        print(f"My name is {self.name}")

    def fly(self) -> None:
        self._fly_behavior.fly()

    def swim(self) -> None:
        self._swim_behavior.swim()

    def shoot(self) -> None:
        self._shoot_behavior.shoot()

class T1000(Robot):
    def __init__(self):
        super().__init__(
            fly_behavior=CanFly(),
            name="T1000"
        )

class T2000(Robot):
    def __init__(self):
        super().__init__(
            fly_behavior=CanFly(),
            swim_behavior=CanSwim(),
            name="T2000"
        )


class T3000(Robot):
    def __init__(self):
        super().__init__(
            fly_behavior=CanFly(),
            swim_behavior=CanSwim(),
            shoot_behavior=CanShoot(),
            name="T3000"
        )

def main():
    robots: List[Robot] = [
        T1000(),
        T2000(),
        T3000(),
    ]

    for robot in robots:
        robot.speak()
        robot.fly()
        robot.swim()
        robot.shoot()
        print("---")


if __name__ == "__main__":
    main()
Нажимаем ctrl + o, затем enter и выходим из файла ctrl + x, после запускаем скрипт:
python3 classes_objects_methods.py

После выходим из директории OOP:
cd ..
Дальше выйди из папки LearnPython:
cd ..
Потом иследуй другую директорию, например Orange4
cd Orange4

To complete the task:
First you need to see where you are, use the pwd command:
pwd
For example, she'll show you the way  /home/sergey/Desktop/PursuitOfCodeKnowledge.git/PursuitOfCodeKnowledge/Game/LevelZero/Universe1/MilkyWayGalaxy/PlanetEarth/Orange3
 it turns out that you are currently in Orange3,
you need to go back using the cd .. :
cd ..
After that, type the command ls or ls -a and see what is around you, which files and directories:
ls
or
ls -a
Then type the mkdir command to create
the Orange directory (if you didn't create Orange directory):
 mkdir Orange
Then go to the directory in Orange3:
cd Orange3
Then transfer the file. ORANGE3.txt to the Orange: 
mv ORANGE3.txt ../Orange/
Then copy the file ORANGE3_ANSWER.txt to the Orange:
 cp ORANGE3_ANSWER.txt ../Orange/
Then check that you copied the file. ORANGE3_ANSWER.txt to the Orange directory using the command ls:
ls ../Orange/ORANGE3_ANSWER.txt
Then delete the file ORANGE3_ANSWER.txt using the rm command:
rm ORANGE3_ANSWER.txt
or
rm -i ORANGE3_ANSWER.txt
or
rm -f ORANGE3_ANSWER.txt
Then exit this directory Orange1:
cd ..
Then delete the Orange3 directory:
rm -r Orange3
After that, make sure that you have deleted the directory:
ls
or
ls -a
If you have already explored the Orange2 directory, then we go into our environment (see the Blue1 directory):
conda activate envlearnpython
Then we go to our LearnPython directory:
cd LearnPython
Then create the  OOP directory:
mkdir OOP
Then go to this  OOP directory:
cd OOP
So create a file classes_objects_methods.py:
touch classes_objects_methods.py
Then open the file. classes_objects_methods.py:
nano classes_objects_methods.py
Write in file:
from abc import ABC
from typing import Optional, List

# Интерфейсы для отдельных методов
class Flyable:
    def fly(self) -> None: ...

class Swimable:
    def swim(self) -> None: ...

class Shootable:
    def shoot(self) -> None: ...


# Реализации для Fly
class CanFly(Flyable):
    def fly(self) -> None:
        print("I can to fly")

class CannotFly(Flyable):
    def fly(self) -> None:
        pass


# Реализации для Swim
class CanSwim(Swimable):
    def swim(self) -> None:
        print("I can to swim")

class CannotSwim(Swimable):
    def swim(self) -> None:
        pass


# Реализации для Shoot
class CanShoot(Shootable):
    def shoot(self) -> None:
        print("I can to shoot")

class CannotShoot(Shootable):
    def shoot(self) -> None:
        pass


class Robot(ABC):
    def __init__(self,
                 fly_behavior: Flyable = CannotFly(),
                 swim_behavior: Swimable = CannotSwim(),
                 shoot_behavior: Shootable = CannotShoot(),
                 name: str = "Robot"):
        self._fly_behavior = fly_behavior
        self._swim_behavior = swim_behavior
        self._shoot_behavior = shoot_behavior
        self.name = name

    def speak(self) -> None:
        print(f"My name is {self.name}")

    def fly(self) -> None:
        self._fly_behavior.fly()

    def swim(self) -> None:
        self._swim_behavior.swim()

    def shoot(self) -> None:
        self._shoot_behavior.shoot()

class T1000(Robot):
    def __init__(self):
        super().__init__(
            fly_behavior=CanFly(),
            name="T1000"
        )

class T2000(Robot):
    def __init__(self):
        super().__init__(
            fly_behavior=CanFly(),
            swim_behavior=CanSwim(),
            name="T2000"
        )


class T3000(Robot):
    def __init__(self):
        super().__init__(
            fly_behavior=CanFly(),
            swim_behavior=CanSwim(),
            shoot_behavior=CanShoot(),
            name="T3000"
        )

def main():
    robots: List[Robot] = [
        T1000(),
        T2000(),
        T3000(),
    ]

    for robot in robots:
        robot.speak()
        robot.fly()
        robot.swim()
        robot.shoot()
        print("---")


if __name__ == "__main__":
    main()

Нажимаем ctrl + o, затем enter и выходим из файла ctrl + x, после запускаем скрипт:
python3 classes_objects_methods.py  

After that, we exit the OOP:
cd ..
Next, exit the LearnPython:
cd .. 
Then follow another directory, for example Orange4
cd Orange4
