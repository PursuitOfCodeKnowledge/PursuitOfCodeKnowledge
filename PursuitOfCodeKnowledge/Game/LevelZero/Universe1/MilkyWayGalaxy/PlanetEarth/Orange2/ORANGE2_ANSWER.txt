Чтобы выполнить задание:
Первое нужно посмотреть где ты находишься, используй команду pwd:
pwd
К примеру она тебе покажет путь /home/sergey/Desktop/PursuitOfCodeKnowledge.git/PursuitOfCodeKnowledge/Game/LevelZero/Universe1/MilkyWayGalaxy/PlanetEarth/Orange2, получается ты сейчас находишься в Orange2, 
тебе нужно вернуться назад используй команду cd ..:
cd ..
После этого набери команду ls или ls -a и посмотри что находится вокруг тебя какие файлы и директории:
ls
или
ls -a
Затем набери команду mkdir чтобы создать директорию Orange (в том случае если ещё не создавал директорию Orange):
mkdir Orange
Затем перейди директорию в Orange2:
cd Orange2
Потом скопируй файл ORANGE2.txt в директорию Orange:
cp ORANGE2.txt ../Orange/
Затем проверь что скопировал файл ORANGE2.txt в директорию Orange при помощи команды ls:
ls ../Orange/ORANGE2.txt
После перенеси  файл файл ORANGE2_ANSWER.txt в директорию Orange:
mv ORANGE2_ANSWER.txt ../Orange/
Потом удали файл ORANGE2.txt при помощи команды rm:
rm ORANGE2.txt
или
rm -i ORANGE2.txt
или
rm -f ORANGE2.txt
После выйди из этой директории Orange2:
cd ..
Затем удали директорию Orange2:
rm -r Orange2
После убедись что удалил директорию:
ls 
или
ls -a

Если исследовал уже директорию Orange1, то подключаемся к postgres: 
sudo -u postgres psql postgres
Вводим пароль от пользователя postgres, который мы создавали до этого

Теперь посмотрим какие базы данных при помощи команды \l:
\l

Видим demo и переходим в неё при помощи команды \c:
\c demo

Потом можно посмотреть какие таблицы в базе данных demo:
\dt

Затем можно посмотреть подробнее о таблице, например bookings(столбцы и ключи):
\d bookings

Потом можно посмотреть подробнее о таблице, например tickets(столбцы и ключи):
\d tickets

Потом можно посмотреть подробнее о таблице, например ticket_flights(столбцы и ключи):
\d ticket_flights

Пример 1: 
-- 1) пометить каждый заказ как 'high' если total_amount > 50000, иначе 'regular'(Простой CASE в SELECT (условная маркировка по сумме заказа)).
SELECT
book_ref,
book_date,
total_amount,
CASE
WHEN total_amount > 50000 THEN 'high'
ELSE 'regular'
END AS order_size
FROM bookings
ORDER BY book_date DESC;

После выполнения запроса нажми клавишу home или end или q для выхода из запроса

Пример 2: 
-- 2) выбрать заказы за последние 30 дней и пометить их как 'recent' или 'old' на лету, используя CASE в SELECT и фильтр по дате(CASE в условии WHERE с логикой по сумме и дате). 
SELECT
b.book_ref,
b.book_date,
b.total_amount,
CASE
WHEN b.book_date >= now() - interval '30 days' THEN 'recent'
ELSE 'old'
END AS recency
FROM bookings b
WHERE b.book_date >= now() - interval '90 days'
ORDER BY b.book_date DESC;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 3: 
-- 3) посчитать общее количество билетов и среднюю цену по каждому book_ref; пометить группы, где средняя цена выше порога(50000 premium или standart).
SELECT
    b.book_ref,
    COUNT(t.ticket_no) AS tickets_count,
    AVG(tf.amount) AS avg_ticket_price,
    CASE
        WHEN AVG(tf.amount) > 50000 THEN 'premium'
        ELSE 'standard'
    END AS pricing_taunt
FROM
    bookings b
JOIN
    tickets t ON t.book_ref = b.book_ref
JOIN
    ticket_flights tf ON tf.ticket_no = t.ticket_no
GROUP BY
    b.book_ref
ORDER BY
    b.book_ref;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 4: 
-- 4) получить количество билетов для каждого бронирования и классифицировать их по количеству('No Tickets', 'Few Tickets', 'Moderate Tickets', 'Many Tickets'). 
SELECT 
    b.book_ref,
    COUNT(t.ticket_no) AS total_tickets,
    CASE 
        WHEN COUNT(t.ticket_no) = 0 THEN 'No Tickets'
        WHEN COUNT(t.ticket_no) BETWEEN 1 AND 3 THEN 'Few Tickets'
        WHEN COUNT(t.ticket_no) BETWEEN 4 AND 10 THEN 'Moderate Tickets'
        ELSE 'Many Tickets'
    END AS ticket_category
FROM 
    bookings b
LEFT JOIN 
    tickets t ON b.book_ref = t.book_ref
GROUP BY 
    b.book_ref;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 5: 
-- 5) вычислить итоговую сумму по каждому бронированию, добавляя различные скидки в зависимости от условий(больше 50000 скидка 10%, от 10000 до 50000 скидка 5%).
SELECT 
    b.book_ref,
    b.total_amount,
    CASE 
        WHEN b.total_amount > 50000 THEN b.total_amount * 0.90  -- 10% скидка
        WHEN b.total_amount BETWEEN 10000 AND 50000 THEN b.total_amount * 0.95  -- 5% скидка
        ELSE b.total_amount  -- без скидки
    END AS final_amount
FROM 
    bookings b;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 6: 
-- 6) отобразить статус('Contact Info Available' если столбец contact_data not NULL, иначе статус 'No Contact Info') каждого пассажира в зависимости от наличия контактных данных.
SELECT 
    t.passenger_name,
    t.passenger_id,
    CASE 
        WHEN t.contact_data IS NOT NULL THEN 'Contact Info Available'
        ELSE 'No Contact Info'
    END AS contact_status
FROM 
    tickets t;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 7: 
-- 7) классифицировать рейсы по классам обслуживания и отображать соответствующую информацию в service_level(если fare_conditions = 'Economy','Comfort', 'Business',
-- то соответственно 'Standard Service', 'Enhanced Service', 'Premium Service' иначе 'Unknown Service').
SELECT 
    tf.ticket_no,
    tf.flight_id,
    tf.amount,
    CASE 
        WHEN tf.fare_conditions = 'Economy' THEN 'Standard Service'
        WHEN tf.fare_conditions = 'Comfort' THEN 'Enhanced Service'
        WHEN tf.fare_conditions = 'Business' THEN 'Premium Service'
        ELSE 'Unknown Service'
    END AS service_level
FROM 
    ticket_flights tf;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 8: 
-- 8) проверить наличие телефонного номера внутри contact_data и пометить как 'has_phone' или 'no_phone'. 
SELECT
t.ticket_no,
t.contact_data,
CASE
WHEN (t.contact_data ->> 'phone') IS NULL OR (t.contact_data ->> 'phone') = '' THEN 'no_phone'
ELSE 'has_phone'
END AS phone_status
FROM bookings.tickets t
WHERE t.contact_data ? 'phone'
ORDER BY t.ticket_no;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 9: 
-- 9) сортировка по статусу CASE, но без добавления нового столбца в результат(если total_amount больше 50000, больше 10000 то соответственно 'A', 'B' иначе 'C').
SELECT
b.book_ref,
b.book_date,
b.total_amount,
CASE
WHEN b.total_amount > 50000 THEN 'A'
WHEN b.total_amount > 10000 THEN 'B'
ELSE 'C'
END AS tier
FROM bookings b
ORDER BY
CASE
WHEN b.total_amount > 50000 THEN 1
WHEN b.total_amount > 10000 THEN 2
ELSE 3
END,
b.book_date DESC;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

После этого выходим из базы данных demo:
\q

Потом дальше иследуй другую директорию, например Orange3:
cd Orange3

To complete the task:
First you need to see where you are, use the pwd command:
pwd
For example, she'll show you the way  /home/sergey/Desktop/PursuitOfCodeKnowledge.git/PursuitOfCodeKnowledge/Game/LevelZero/Universe1/MilkyWayGalaxy/PlanetEarth/Orange2
 it turns out that you are currently in Orange2,
you need to go back using the cd .. :
cd ..
After that, type the command ls or ls -a and see what is around you, which files and directories:
ls
or
ls -a
Then type the mkdir command to create
the Orange directory(if you didn't create Orange directory):
mkdir Orange
Then go to the directory in Orange2:
cd Orange2
Then  copy the file ORANGE2.txt to the Orange:
cp ORANGE2.txt ../Orange/
Then check that you copied the file. ORANGE2.txt to the Orange directory using the command ls:
ls ../Orange/ORANGE2.txt
Then transfer the file ORANGE2_ANSWER.txt to the Orange:
mv ORANGE2_ANSWER.txt ../Orange/
Then delete the file ORANGE2.txt using the rm command:
rm ORANGE2.txt
or
rm -i ORANGE2.txt
or
rm -f ORANGE2.txt
Then exit this directory Orange2:
cd ..
Then delete the Orange2 directory:
rm -r Orange2
After that, make sure that you have deleted the directory:
ls
or
ls -a

If you have already explored the Orange1 directory, then we connect to postgres:
sudo -u postgres psql postgres
We enter the password from the postgres user that we created before

Now let's look at which databases using the \l command:
\l

We see the demo and go to it using the \c command:
\c demo

Then you can see which tables are in the demo database.:
\dt

Then you can view more information about the table, for example bookings(columns and keys):
\d bookings

Then you can see more details about the table, for example tickets(columns and keys):
\d tickets

Then you can see more details about the table, for example ticket_flights(columns and keys):
\d ticket_flights

Пример 1: 
-- 1) пометить каждый заказ как 'high' если total_amount > 50000, иначе 'regular'(Простой CASE в SELECT (условная маркировка по сумме заказа)).
SELECT
book_ref,
book_date,
total_amount,
CASE
WHEN total_amount > 50000 THEN 'high'
ELSE 'regular'
END AS order_size
FROM bookings
ORDER BY book_date DESC;

После выполнения запроса нажми клавишу home или end или q для выхода из запроса

Пример 2: 
-- 2) выбрать заказы за последние 30 дней и пометить их как 'recent' или 'old' на лету, используя CASE в SELECT и фильтр по дате(CASE в условии WHERE с логикой по сумме и дате). 
SELECT
b.book_ref,
b.book_date,
b.total_amount,
CASE
WHEN b.book_date >= now() - interval '30 days' THEN 'recent'
ELSE 'old'
END AS recency
FROM bookings b
WHERE b.book_date >= now() - interval '90 days'
ORDER BY b.book_date DESC;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 3: 
-- 3) посчитать общее количество билетов и среднюю цену по каждому book_ref; пометить группы, где средняя цена выше порога(50000 premium или standart).
SELECT
    b.book_ref,
    COUNT(t.ticket_no) AS tickets_count,
    AVG(tf.amount) AS avg_ticket_price,
    CASE
        WHEN AVG(tf.amount) > 50000 THEN 'premium'
        ELSE 'standard'
    END AS pricing_taunt
FROM
    bookings b
JOIN
    tickets t ON t.book_ref = b.book_ref
JOIN
    ticket_flights tf ON tf.ticket_no = t.ticket_no
GROUP BY
    b.book_ref
ORDER BY
    b.book_ref;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 4: 
-- 4) получить количество билетов для каждого бронирования и классифицировать их по количеству('No Tickets', 'Few Tickets', 'Moderate Tickets', 'Many Tickets'). 
SELECT 
    b.book_ref,
    COUNT(t.ticket_no) AS total_tickets,
    CASE 
        WHEN COUNT(t.ticket_no) = 0 THEN 'No Tickets'
        WHEN COUNT(t.ticket_no) BETWEEN 1 AND 3 THEN 'Few Tickets'
        WHEN COUNT(t.ticket_no) BETWEEN 4 AND 10 THEN 'Moderate Tickets'
        ELSE 'Many Tickets'
    END AS ticket_category
FROM 
    bookings b
LEFT JOIN 
    tickets t ON b.book_ref = t.book_ref
GROUP BY 
    b.book_ref;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 5: 
-- 5) вычислить итоговую сумму по каждому бронированию, добавляя различные скидки в зависимости от условий(больше 50000 скидка 10%, от 10000 до 50000 скидка 5%).
SELECT 
    b.book_ref,
    b.total_amount,
    CASE 
        WHEN b.total_amount > 50000 THEN b.total_amount * 0.90  -- 10% скидка
        WHEN b.total_amount BETWEEN 10000 AND 50000 THEN b.total_amount * 0.95  -- 5% скидка
        ELSE b.total_amount  -- без скидки
    END AS final_amount
FROM 
    bookings b;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 6: 
-- 6) отобразить статус('Contact Info Available' если столбец contact_data not NULL, иначе статус 'No Contact Info') каждого пассажира в зависимости от наличия контактных данных.
SELECT 
    t.passenger_name,
    t.passenger_id,
    CASE 
        WHEN t.contact_data IS NOT NULL THEN 'Contact Info Available'
        ELSE 'No Contact Info'
    END AS contact_status
FROM 
    tickets t;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 7: 
-- 7) классифицировать рейсы по классам обслуживания и отображать соответствующую информацию в service_level(если fare_conditions = 'Economy','Comfort', 'Business',
-- то соответственно 'Standard Service', 'Enhanced Service', 'Premium Service' иначе 'Unknown Service').
SELECT 
    tf.ticket_no,
    tf.flight_id,
    tf.amount,
    CASE 
        WHEN tf.fare_conditions = 'Economy' THEN 'Standard Service'
        WHEN tf.fare_conditions = 'Comfort' THEN 'Enhanced Service'
        WHEN tf.fare_conditions = 'Business' THEN 'Premium Service'
        ELSE 'Unknown Service'
    END AS service_level
FROM 
    ticket_flights tf;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 8: 
-- 8) проверить наличие телефонного номера внутри contact_data и пометить как 'has_phone' или 'no_phone'. 
SELECT
t.ticket_no,
t.contact_data,
CASE
WHEN (t.contact_data ->> 'phone') IS NULL OR (t.contact_data ->> 'phone') = '' THEN 'no_phone'
ELSE 'has_phone'
END AS phone_status
FROM bookings.tickets t
WHERE t.contact_data ? 'phone'
ORDER BY t.ticket_no;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 9: 
-- 9) сортировка по статусу CASE, но без добавления нового столбца в результат(если total_amount больше 50000, больше 10000 то соответственно 'A', 'B' иначе 'C').
SELECT
b.book_ref,
b.book_date,
b.total_amount,
CASE
WHEN b.total_amount > 50000 THEN 'A'
WHEN b.total_amount > 10000 THEN 'B'
ELSE 'C'
END AS tier
FROM bookings b
ORDER BY
CASE
WHEN b.total_amount > 50000 THEN 1
WHEN b.total_amount > 10000 THEN 2
ELSE 3
END,
b.book_date DESC;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос


After that, we exit the demo database.:
\q

Then follow another directory, for example Orange3:
cd Orange3
