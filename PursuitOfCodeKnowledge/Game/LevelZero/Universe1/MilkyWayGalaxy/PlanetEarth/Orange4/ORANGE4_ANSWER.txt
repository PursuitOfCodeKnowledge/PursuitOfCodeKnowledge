Чтобы выполнить задание:
Первое нужно посмотреть где ты находишься, используй команду pwd:
pwd
К примеру она тебе покажет путь /home/sergey/Desktop/PursuitOfCodeKnowledge.git/PursuitOfCodeKnowledge/Game/LevelZero/Universe1/MilkyWayGalaxy/PlanetEarth/Orange4, получается ты сейчас находишься в Orange4, 
тебе нужно вернуться назад используй команду cd ..:
cd ..
После этого набери команду ls или ls -a и посмотри что находится вокруг тебя какие файлы и директории:
ls
или
ls -a
Затем набери команду mkdir чтобы создать директорию Orange (в том случае если ещё не создавал директорию Orange):
mkdir Orange
Затем перейди директорию в Orange4:
cd Orange4
Потом скопируй файл ORANGE4.txt в директорию Orange:
cp ORANGE4.txt ../Orange/
Затем проверь что скопировал файл ORANGE4.txt в директорию Orange при помощи команды ls:
ls ../Orange/ORANGE4.txt
После перенеси  файл файл ORANGE4_ANSWER.txt в директорию Orange:
mv ORANGE4_ANSWER.txt ../Orange/
Потом удали файл ORANGE4.txt при помощи команды rm:
rm ORANGE4.txt
или
rm -i ORANGE4.txt
или
rm -f ORANGE4.txt
После выйди из этой директории Orange4:
cd ..
Затем удали директорию Orange4:
rm -r Orange4
После убедись что удалил директорию:
ls 
или
ls -a

Если исследовал уже директорию Orange3, то подключаемся к postgres: 
sudo -u postgres psql postgres
Вводим пароль от пользователя postgres, который мы создавали до этого

Теперь посмотрим какие базы данных при помощи команды \l:
\l

Видим demo и переходим в неё при помощи команды \c:
\c demo

Потом можно посмотреть какие таблицы в базе данных demo:
\dt

Затем можно посмотреть подробнее о таблице, например bookings(столбцы и ключи):
\d bookings

Потом можно посмотреть подробнее о таблице, например tickets(столбцы и ключи):
\d tickets

Потом можно посмотреть подробнее о таблице, например ticket_flights(столбцы и ключи):
\d ticket_flights

Потом можно посмотреть подробнее о таблице, например flights(столбцы и ключи):
\d flights

Пример 1: 
-- 1) Выведи список всех билетов и их порядковый номер внутри бронирования (book_ref)(ROW_NUMBER()).
SELECT
    book_ref,
    ticket_no,
    passenger_name,
    ROW_NUMBER() OVER (
        PARTITION BY book_ref
        ORDER BY ticket_no
    ) AS ticket_number_in_booking
FROM tickets
ORDER BY book_ref, ticket_no;
 
После выполнения запроса нажми клавишу home или end или q для выхода из запроса

Пример 2: 
-- 2) Отсортируй бронирования по total_amount и назначь каждому ранг(RANK()). Выведи только 10 самых дорогих бронирований.
SELECT
    book_ref,
    total_amount,
    RANK() OVER (ORDER BY total_amount DESC) AS rank_by_amount
FROM bookings.bookings
ORDER BY rank_by_amount
LIMIT 10;

Пример 3: 
-- 3)  Отсортируй бронирования по total_amount и назначь каждому ранг(DENSE_RANK()). Выведи только 10 самых дорогих бронирований.
SELECT
    book_ref,
    total_amount,
    DENSE_RANK() OVER (ORDER BY total_amount DESC) AS dense_rank_by_amount
FROM bookings.bookings
ORDER BY dense_rank_by_amount
LIMIT 10;

Пример 4: 
-- 4) Разбей все бронирования на 4 группы по стоимости (total_amount).
SELECT
    book_ref,
    total_amount,
    NTILE(4) OVER (ORDER BY total_amount DESC) AS amount_quartile
FROM bookings.bookings
ORDER BY amount_quartile, total_amount DESC;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 5: 
-- 5) Выведи все рейсы из аэропорта DME, пронумеровав их в порядке вылета.(ROW_NUMBER())
SELECT
    departure_airport,
    flight_no,
    scheduled_departure,
    ROW_NUMBER() OVER (
        PARTITION BY departure_airport
        ORDER BY scheduled_departure
    ) AS flight_seq
FROM bookings.flights
WHERE departure_airport = 'DME'
ORDER BY scheduled_departure;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 6: 
-- 6) Для каждого билета (ticket_no) выведи текущую цену, цену предыдущего рейса(LAG) и цену следующего рейса(LEAD).
SELECT
    tf.ticket_no,
    tf.flight_id,
    tf.amount,
    LAG(tf.amount) OVER (PARTITION BY tf.ticket_no ORDER BY tf.flight_id)  AS prev_price,
    LEAD(tf.amount) OVER (PARTITION BY tf.ticket_no ORDER BY tf.flight_id) AS next_price
FROM bookings.ticket_flights tf
ORDER BY tf.ticket_no, tf.flight_id;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 7: 
-- 7) Посчитай общую выручку(SUM()) и среднюю стоимость (AVG())  билета по каждому рейсу.
SELECT
    tf.flight_id,
    tf.amount,
    SUM(tf.amount) OVER (PARTITION BY tf.flight_id) AS total_revenue_per_flight,
    AVG(tf.amount) OVER (PARTITION BY tf.flight_id) AS avg_ticket_price
FROM bookings.ticket_flights tf
ORDER BY tf.flight_id, tf.amount;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 8: 
-- 8) Сделай накопительную сумму стоимости билетов в рамках одного рейса(ROWS BETWEEN). 
SELECT
    tf.flight_id,
    tf.amount,
    SUM(tf.amount) OVER (
        PARTITION BY tf.flight_id
        ORDER BY tf.amount
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS running_total
FROM bookings.ticket_flights tf
ORDER BY tf.flight_id, tf.amount;
После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 9: 
-- 9) Для каждого рейса посчитай разницу между фактическим временем вылета и запланированным. Добавь «ранг» по величине задержки(EXTRACT(), RANK()).
SELECT
    f.flight_id,
    f.flight_no,
    ROUND(EXTRACT(EPOCH FROM (f.actual_departure - f.scheduled_departure)) / 60) AS delay_minutes,
    RANK() OVER (ORDER BY (f.actual_departure - f.scheduled_departure) DESC) AS delay_rank
FROM flights f
WHERE f.actual_departure IS NOT NULL
  AND f.scheduled_departure IS NOT NULL
  AND f.actual_departure > f.scheduled_departure
ORDER BY delay_rank;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 10: 
-- 10) Топ-3 самых дорогих бронирований в каждом месяце.
WITH monthly_bookings AS (
    SELECT
        book_ref,
        book_date,
        total_amount,
        DATE_TRUNC('month', book_date) AS month,
        RANK() OVER (
            PARTITION BY DATE_TRUNC('month', book_date)
            ORDER BY total_amount DESC
        ) AS rank_in_month
    FROM bookings
)
SELECT
    month,
    book_ref,
    total_amount,
    rank_in_month
FROM monthly_bookings
WHERE rank_in_month <= 3
ORDER BY month, rank_in_month, total_amount DESC;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 11: 
-- 11) Сколько пассажиров вылетело из аэропорта в день.
SELECT
    f.departure_airport,
    DATE(f.scheduled_departure) AS flight_day,
    COUNT(DISTINCT t.ticket_no) AS passengers_count
FROM flights f
JOIN ticket_flights tf ON f.flight_id = tf.flight_id
JOIN tickets t ON tf.ticket_no = t.ticket_no
GROUP BY f.departure_airport, DATE(f.scheduled_departure)
ORDER BY f.departure_airport, flight_day;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

После этого выходим из базы данных demo:
\q

Потом дальше иследуй другую директорию, например Orange5:
cd Orange5

To complete the task:
First you need to see where you are, use the pwd command:
pwd
For example, she'll show you the way  /home/sergey/Desktop/PursuitOfCodeKnowledge.git/PursuitOfCodeKnowledge/Game/LevelZero/Universe1/MilkyWayGalaxy/PlanetEarth/Orange4
 it turns out that you are currently in Orange4,
you need to go back using the cd .. :
cd ..
After that, type the command ls or ls -a and see what is around you, which files and directories:
ls
or
ls -a
Then type the mkdir command to create
the Orange directory(if you didn't create Orange directory):
mkdir Orange
Then go to the directory in Orange4:
cd Orange4
Then  copy the file ORANGE4.txt to the Orange:
cp ORANGE4.txt ../Orange/
Then check that you copied the file. ORANGE4.txt to the Orange directory using the command ls:
ls ../Orange/ORANGE4.txt
Then transfer the file ORANGE4_ANSWER.txt to the Orange:
mv ORANGE4_ANSWER.txt ../Orange/
Then delete the file ORANGE4.txt using the rm command:
rm ORANGE4.txt
or
rm -i ORANGE4.txt
or
rm -f ORANGE4.txt
Then exit this directory Orange4:
cd ..
Then delete the Orange4 directory:
rm -r Orange4
After that, make sure that you have deleted the directory:
ls
or
ls -a

If you have already explored the Orange3 directory, then we connect to postgres:
sudo -u postgres psql postgres
We enter the password from the postgres user that we created before

Now let's look at which databases using the \l command:
\l

We see the demo and go to it using the \c command:
\c demo

Then you can see which tables are in the demo database.:
\dt

Then you can view more information about the table, for example bookings(columns and keys):
\d bookings

Then you can see more details about the table, for example tickets(columns and keys):
\d tickets

Then you can see more details about the table, for example ticket_flights(columns and keys):
\d ticket_flights

Then you can see more details about the table, for example flights(columns and keys):
\d flights

Пример 1: 
-- 1) Выведи список всех билетов и их порядковый номер внутри бронирования (book_ref)(ROW_NUMBER()).
SELECT
    book_ref,
    ticket_no,
    passenger_name,
    ROW_NUMBER() OVER (
        PARTITION BY book_ref
        ORDER BY ticket_no
    ) AS ticket_number_in_booking
FROM tickets
ORDER BY book_ref, ticket_no;
 
После выполнения запроса нажми клавишу home или end или q для выхода из запроса

Пример 2: 
-- 2) Отсортируй бронирования по total_amount и назначь каждому ранг(RANK()). Выведи только 10 самых дорогих бронирований.
SELECT
    book_ref,
    total_amount,
    RANK() OVER (ORDER BY total_amount DESC) AS rank_by_amount
FROM bookings.bookings
ORDER BY rank_by_amount
LIMIT 10;

Пример 3: 
-- 3)  Отсортируй бронирования по total_amount и назначь каждому ранг(DENSE_RANK()). Выведи только 10 самых дорогих бронирований.
SELECT
    book_ref,
    total_amount,
    DENSE_RANK() OVER (ORDER BY total_amount DESC) AS dense_rank_by_amount
FROM bookings.bookings
ORDER BY dense_rank_by_amount
LIMIT 10;

Пример 4: 
-- 4) Разбей все бронирования на 4 группы по стоимости (total_amount).
SELECT
    book_ref,
    total_amount,
    NTILE(4) OVER (ORDER BY total_amount DESC) AS amount_quartile
FROM bookings.bookings
ORDER BY amount_quartile, total_amount DESC;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 5: 
-- 5) Выведи все рейсы из аэропорта DME, пронумеровав их в порядке вылета.(ROW_NUMBER())
SELECT
    departure_airport,
    flight_no,
    scheduled_departure,
    ROW_NUMBER() OVER (
        PARTITION BY departure_airport
        ORDER BY scheduled_departure
    ) AS flight_seq
FROM bookings.flights
WHERE departure_airport = 'DME'
ORDER BY scheduled_departure;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 6: 
-- 6) Для каждого билета (ticket_no) выведи текущую цену, цену предыдущего рейса(LAG) и цену следующего рейса(LEAD).
SELECT
    tf.ticket_no,
    tf.flight_id,
    tf.amount,
    LAG(tf.amount) OVER (PARTITION BY tf.ticket_no ORDER BY tf.flight_id)  AS prev_price,
    LEAD(tf.amount) OVER (PARTITION BY tf.ticket_no ORDER BY tf.flight_id) AS next_price
FROM bookings.ticket_flights tf
ORDER BY tf.ticket_no, tf.flight_id;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 7: 
-- 7) Посчитай общую выручку(SUM()) и среднюю стоимость (AVG())  билета по каждому рейсу.
SELECT
    tf.flight_id,
    tf.amount,
    SUM(tf.amount) OVER (PARTITION BY tf.flight_id) AS total_revenue_per_flight,
    AVG(tf.amount) OVER (PARTITION BY tf.flight_id) AS avg_ticket_price
FROM bookings.ticket_flights tf
ORDER BY tf.flight_id, tf.amount;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 8: 
-- 8) Сделай накопительную сумму стоимости билетов в рамках одного рейса(ROWS BETWEEN). 
SELECT
    tf.flight_id,
    tf.amount,
    SUM(tf.amount) OVER (
        PARTITION BY tf.flight_id
        ORDER BY tf.amount
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS running_total
FROM bookings.ticket_flights tf
ORDER BY tf.flight_id, tf.amount;
После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 9: 
-- 9) Для каждого рейса посчитай разницу между фактическим временем вылета и запланированным. Добавь «ранг» по величине задержки(EXTRACT(), RANK()).
SELECT
    f.flight_id,
    f.flight_no,
    ROUND(EXTRACT(EPOCH FROM (f.actual_departure - f.scheduled_departure)) / 60) AS delay_minutes,
    RANK() OVER (ORDER BY (f.actual_departure - f.scheduled_departure) DESC) AS delay_rank
FROM flights f
WHERE f.actual_departure IS NOT NULL
  AND f.scheduled_departure IS NOT NULL
  AND f.actual_departure > f.scheduled_departure
ORDER BY delay_rank;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 10: 
-- 10) Топ-3 самых дорогих бронирований в каждом месяце.
WITH monthly_bookings AS (
    SELECT
        book_ref,
        book_date,
        total_amount,
        DATE_TRUNC('month', book_date) AS month,
        RANK() OVER (
            PARTITION BY DATE_TRUNC('month', book_date)
            ORDER BY total_amount DESC
        ) AS rank_in_month
    FROM bookings
)
SELECT
    month,
    book_ref,
    total_amount,
    rank_in_month
FROM monthly_bookings
WHERE rank_in_month <= 3
ORDER BY month, rank_in_month, total_amount DESC;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

Пример 11: 
-- 11) Сколько пассажиров вылетело из аэропорта в день.
SELECT
    f.departure_airport,
    DATE(f.scheduled_departure) AS flight_day,
    COUNT(DISTINCT t.ticket_no) AS passengers_count
FROM flights f
JOIN ticket_flights tf ON f.flight_id = tf.flight_id
JOIN tickets t ON tf.ticket_no = t.ticket_no
GROUP BY f.departure_airport, DATE(f.scheduled_departure)
ORDER BY f.departure_airport, flight_day;

После выполнения запроса нажми клавишу home или end или q для выхода из запрос

After that, we exit the demo database.:
\q

Then follow another directory, for example Orange5:
cd Orange5
